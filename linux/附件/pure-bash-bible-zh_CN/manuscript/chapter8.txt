#参数拓展

##间接

| 参数 | 它将做什么？ |
| --------- | ---------------- |
| `${!VAR}` | 根据`VAR`的值访问一个变量.
| `${!VAR*}` | 扩展为以`VAR`开头的变量名列表，并用`IFS`分隔. |
| `${!VAR@}` | 扩展为以`VAR`开头的变量名列表，并用`IFS`分隔. 如果是双引号，则每个变量名称都会扩展为单独的单词. |


##替换

| 参数 | 它将做什么？ |
| --------- | ---------------- |
| `${VAR#PATTERN}` | 删除第一次匹配的模式及其左边的字符. |
| `${VAR##PATTERN}` | 删除最后一次匹配的模式及其左边的字符. |
| `${VAR%PATTERN}` | 删除最后一次匹配的模式及其右边的字符. |
| `${VAR%%PATTERN}` | 删除第一次匹配的模式及其右边的字符. |
| `${VAR/PATTERN/REPLACE}` | 替换第一次匹配的字符.
| `${VAR//PATTERN/REPLACE}` | 替换所有匹配的字符.
| `${VAR/PATTERN}` | 删除第一次匹配的字符.
| `${VAR//PATTERN}` | 删除所有匹配的字符.

##长度

| 参数 | 它将做什么？ |
| --------- | ---------------- |
| `${#VAR}` | 字符变量的长度.
| `${#ARR[@]}` | 数组的长度.

##扩展

| 参数 | 它将做什么？ | 版本要求 |
| --------- | ---------------- |
| `${VAR:OFFSET}` | 从变量中删除第OFFSET个字符及之前的字符.
| `${VAR:OFFSET:LENGTH}` | 获得从`OFFSET`字符之后`LENGTH`个字符的字符串. <br> (`${VAR:10:10}`: 获得从第10个字符到第20个字符的字符串)
| `${VAR:: OFFSET}` | 从变量中获取前`OFFSET`个字符.
| `${VAR:: -OFFSET}` | 从变量中移除前`OFFSET`个字符.
| `${VAR: -OFFSET}` | 从变量中获取最后`OFFSET`个字符.
| `${VAR:OFFSET:-OFFSET}` | 删除前`OFFSET`个字符以及最后`OFFSET`个字符. | `bash 4.2+` |

##改变大小写

| 参数 | 它将做什么？ | 版本要求 |
| --------- | ---------------- | ------ |
| `${VAR^}` | 大写第一个字符. | `bash 4+` |
| `${VAR^^}` | 大写所有字符. | `bash 4+` |
| `${VAR,}` | 小写第一个字符. | `bash 4+` |
| `${VAR,,}` | 小写所有字符. | `bash 4+` |
| `${VAR~}` | 反转第一个字符. | `bash 4+` |
| `${VAR~~}` | 反转所有字符. | `bash 4+` |


##默认值

| 参数 | 它将做什么？ |
| --------- | ---------------- |
| `${VAR:-STRING}` | 如果 `VAR` 为空或未设置，使用 `STRING` 作为它的值.
| `${VAR-STRING}` | 如果 `VAR` 未设置, 使用 `STRING` 作为它的值.
| `${VAR:=STRING}` | 如果 `VAR` 为空或未设置, 设置 `VAR` 的值为 `STRING`.
| `${VAR=STRING}` | 如果 `VAR` 未设置, 设置 `VAR` 的值为 `STRING`.
| `${VAR:+STRING}` | 如果 `VAR` 不为空, 使用 `STRING` 作为它的值.
| `${VAR+STRING}` | 如果 `VAR` 已设置, 使用 `STRING` 作为它的值.
| `${VAR:?STRING}` | 如果为空或未设置，则显示一个错误.
| `${VAR?STRING}` | 如果未设置则显示一个错误.


<!-- CHAPTER END -->

